appConfig {
  applicationName = "super.saas.log"
  env = "blue"
  db {
    url = s"jdbc:mysql://dbmaster."${appConfig.env}".websaas.rnd.qa:3306/spark_reports?rewriteBatchedStatements=true"
    user = "saas_admin"
    password = "admin2015"
    batchSize = 10000
    driver = "com.mysql.jdbc.Driver"
    test_url = "jdbc:mysql://auth1."${appConfig.env}".websaas.rnd.qa:3306/test"
  }
  vertica {
    url = "jdbc:vertica://saaslogsmaster."${appConfig.env}".websaas.rnd.qa:5433/test?ConnectionLoadBalance=1&loginTimeout=35"
    test_url = "jdbc:vertica://192.168.40.201:5433/cyren?ConnectionLoadBalance=1&loginTimeout=35"
    user = "dbadmin"
    password = "dbadmin"
    driver = "com.vertica.jdbc.Driver"
    hdfs {
      importPath = ${appConfig.hdfs.dwhRootURI}"/data/cws/test/vertica/imp"
      batchToImport = 140
    }
  }
  dbPool {
    poolSize = 20
    cachePrepStmts = true
    prepStmtCacheSize = 250
    prepStmtCacheSqlLimit = 2048
    useServerPrepStmts = true
    connectionTimeout = 3000
    minimumIdle = 5
  }
  hdfs {
    rootURI = "hdfs://saas-logs-lab-worker02.cws.lab:8020"
    dwhRootURI = "hdfs://dwh-master02.dwh.lab"
    executorNumber = 8
    maxRecordsPerFile = 300000
  }
  parquet {
    sourcePath = ${appConfig.hdfs.rootURI}"/data/cws/parquet/test"
    sourcePathDwh = ${appConfig.hdfs.dwhRootURI}"/data/cws/export/parquet/2017/10/*/*/*/*.parquet"
    sourcePathDwhConverted = ${appConfig.hdfs.rootURI}"/data/cws/parquet/test"
    basePath = ${appConfig.hdfs.dwhRootURI}"/data/cws/test/parquet/"
  }
  csv {
    srcPath = ${appConfig.hdfs.rootURI}"/data/cws/csv/archive1/*.csv"
    destPath = ${appConfig.hdfs.rootURI}"/data/cws/parquet/converted/"
    writeCSVPath = ${appConfig.hdfs.rootURI}"/data/cws/csv/toLoad"
  }
  spark {
    checkpointLocation = ${appConfig.hdfs.dwhRootURI}"/data/cws/test/checkpoint"
    submitDeployMode = "cluster"
    executorMemory = "24g"
    driverMemory = "2g"
    executorCoreNum = 8
    master = "spark://saas-logs-lab-master.cws.lab:7077"
  }
  kafka {
    bootstrap = "dwh-kafka01.dwh.lab:6667,dwh-kafka02.dwh.lab:6667,dwh-kafka03.dwh.lab:6667"
    requestTimeout = 40000
    topics = "m21v"
    checkpointLocation = ${appConfig.hdfs.dwhRootURI}"/data/cws/test/checkpoint"
  }
  common {
    maxFilesPerTrigger = 6
  }
  services {
    fetchRowLimit = 100
    SparkStreamToKafkaService {
      enable = false
      trigger = 90
      retry {
        retryNumber = 3
      }

    }
    SparkStreamToVericaService {
      enable = false
      maxFilesPerTrigger = 200
      trigger = 60
    }
    CatalogReportsService {
      enable = false
      windowDuration = "1 hour"
      slideDuration = "10 minutes"
      startTimeOffset = "10 minutes"
      trigger = 120
      calcAttributes = "host,category,policy_action,policy_name,post_processed.device,url"
      retry {
        retryNumber = 3
      }
    }
    SparkStrunctStreamFromKafkaService {
      enable = false
      trigger = 30
    }
    DynamicQueryManager {
      rateLimit = 100
      queryProcessorStrategy = "VERTICA"
      async {
        durationMillis = 5000
        poolSize = 10
      }
    }
    ReportManager {
      async {
        durationMillis = 60000
        poolSize = 10
      }
    }
    ScheduledReportsService {
      enable = false
      fetcherRate = 10
      processRate = 50
      queueSize = 100
      maxPendingThreads = 10
      dequeueBatchSize = 15
    }
    OfflineTopReportsService {
      isDebug = false
      supportMultiColumn = false
    }
    VerticaDataImporter {
      enable = false
      isDebug = true
      fetcherRate = 30
      maxFilesPerTrigger = 1
    }
    VerticaPartitionLoadMgr {
      enable = false
      scanFrom = "2017/09/01"
      scheduleRate = 600
    }
    SparkStreamFromKafkaService {
      enable = false
      trigger = 30
    }
    GraphiteExporter {
      enable = true
      serverPrefix = "00ac042e"
      key="141b1a2d-2cfa-40ca-9eab-760f70b3c02a"
      periodSec = 20
      port = 2003
    }

  }
  jarLocation = "service/target/service_2.11-1.0.3.RELEASE.jar"
}

